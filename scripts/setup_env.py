#!/usr/bin/env python3
"""
LERK System - Environment Setup Script
This script sets up the development environment and configuration.
"""

import argparse
import logging
import sys
import os
import json
from pathlib import Path
from typing import Dict, Any, Optional

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/env_setup.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class EnvironmentSetup:
    """Handles environment setup and configuration."""
    
    def __init__(self, config_file: Optional[str] = None):
        """
        Initialize the environment setup.
        
        Args:
            config_file: Path to configuration file
        """
        self.config_file = config_file or "config/env_setup.json"
        self.project_root = Path(__file__).parent.parent
        
    def load_config(self) -> Dict[str, Any]:
        """Load configuration from file."""
        try:
            if Path(self.config_file).exists():
                with open(self.config_file, 'r') as f:
                    return json.load(f)
            else:
                return self._get_default_config()
        except Exception as e:
            logger.warning(f"Failed to load config file: {e}")
            return self._get_default_config()
    
    def _get_default_config(self) -> Dict[str, Any]:
        """Get default configuration."""
        return {
            "environment": "development",
            "database": {
                "url": "postgresql://user:password@localhost:5432/lerk_db",
                "host": "localhost",
                "port": 5432,
                "name": "lerk_db",
                "user": "user",
                "password": "password"
            },
            "vector_db": {
                "url": "http://localhost:6333",
                "api_key": ""
            },
            "redis": {
                "url": "redis://localhost:6379/0"
            },
            "openai": {
                "api_key": "",
                "model": "gpt-4o-mini",
                "temperature": 0.1
            },
            "logging": {
                "level": "INFO",
                "format": "json",
                "file": "logs/lerk.log"
            },
            "processing": {
                "max_workers": 4,
                "chunk_size": 1000,
                "chunk_overlap": 200
            },
            "api": {
                "host": "0.0.0.0",
                "port": 8000,
                "workers": 4
            }
        }
    
    def create_directories(self):
        """Create necessary directories."""
        directories = [
            "logs",
            "data/raw",
            "data/processed",
            "data/output",
            "temp",
            "config",
            "tests/ingest_test",
            "tests/enrichment_test",
            "tests/logic_extractor_test",
            "tests/clustering_test",
            "tests/consolidation_test",
            "tests/retriever_test",
            "tests/qa_agent_test"
        ]
        
        for directory in directories:
            dir_path = self.project_root / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            logger.info(f"Created directory: {directory}")
    
    def create_env_file(self, config: Dict[str, Any]):
        """Create .env file from configuration."""
        env_content = f"""# LERK System Environment Configuration
# Generated by setup_env.py

# Environment
ENVIRONMENT={config['environment']}

# Database Configuration
DATABASE_URL={config['database']['url']}
DATABASE_HOST={config['database']['host']}
DATABASE_PORT={config['database']['port']}
DATABASE_NAME={config['database']['name']}
DATABASE_USER={config['database']['user']}
DATABASE_PASSWORD={config['database']['password']}

# Vector Database Configuration
QDRANT_URL={config['vector_db']['url']}
QDRANT_API_KEY={config['vector_db']['api_key']}

# Redis Configuration
REDIS_URL={config['redis']['url']}

# OpenAI Configuration
OPENAI_API_KEY={config['openai']['api_key']}
OPENAI_MODEL={config['openai']['model']}
OPENAI_TEMPERATURE={config['openai']['temperature']}

# Logging Configuration
LOG_LEVEL={config['logging']['level']}
LOG_FORMAT={config['logging']['format']}
LOG_FILE={config['logging']['file']}

# Processing Configuration
MAX_WORKERS={config['processing']['max_workers']}
CHUNK_SIZE={config['processing']['chunk_size']}
CHUNK_OVERLAP={config['processing']['chunk_overlap']}

# API Configuration
API_HOST={config['api']['host']}
API_PORT={config['api']['port']}
API_WORKERS={config['api']['workers']}

# Development Configuration
DEBUG=True
TESTING=False
"""
        
        env_file = self.project_root / ".env"
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        logger.info(f"Created .env file: {env_file}")
    
    def create_config_files(self, config: Dict[str, Any]):
        """Create configuration files."""
        # Create config/dev.yaml
        dev_config = {
            "database": {
                "url": config['database']['url'],
                "echo": True,
                "pool_size": 5,
                "max_overflow": 10
            },
            "vector_db": {
                "url": config['vector_db']['url'],
                "collection_name": "lerk_dev",
                "vector_size": 384
            },
            "redis": {
                "url": config['redis']['url'],
                "max_connections": 10
            },
            "logging": {
                "level": "DEBUG",
                "format": "json",
                "file": "logs/lerk_dev.log",
                "max_size": "10MB",
                "backup_count": 5
            },
            "processing": {
                "max_workers": config['processing']['max_workers'],
                "chunk_size": config['processing']['chunk_size'],
                "chunk_overlap": config['processing']['chunk_overlap'],
                "batch_size": 10
            },
            "api": {
                "host": config['api']['host'],
                "port": config['api']['port'],
                "workers": config['api']['workers'],
                "reload": True,
                "log_level": "debug"
            },
            "development": {
                "debug": True,
                "testing": True,
                "mock_llm": False,
                "cache_responses": True
            }
        }
        
        config_dir = self.project_root / "config"
        config_dir.mkdir(exist_ok=True)
        
        with open(config_dir / "dev.yaml", 'w') as f:
            import yaml
            yaml.dump(dev_config, f, default_flow_style=False)
        
        logger.info("Created config/dev.yaml")
        
        # Create config/production.yaml
        prod_config = dev_config.copy()
        prod_config['logging']['level'] = 'INFO'
        prod_config['development']['debug'] = False
        prod_config['development']['testing'] = False
        prod_config['api']['reload'] = False
        prod_config['api']['log_level'] = 'info'
        
        with open(config_dir / "production.yaml", 'w') as f:
            yaml.dump(prod_config, f, default_flow_style=False)
        
        logger.info("Created config/production.yaml")
    
    def create_docker_compose(self, config: Dict[str, Any]):
        """Create Docker Compose configuration."""
        docker_compose_content = f"""version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: {config['database']['name']}
      POSTGRES_USER: {config['database']['user']}
      POSTGRES_PASSWORD: {config['database']['password']}
    ports:
      - "{config['database']['port']}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {config['database']['user']} -d {config['database']['name']}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
"""
        
        with open(self.project_root / "docker-compose.yml", 'w') as f:
            f.write(docker_compose_content)
        
        logger.info("Created docker-compose.yml")
    
    def create_pre_commit_config(self):
        """Create pre-commit configuration."""
        pre_commit_config = """repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: debug-statements

  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black"]

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: ["--max-line-length", "88", "--extend-ignore", "E203"]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
"""
        
        with open(self.project_root / ".pre-commit-config.yaml", 'w') as f:
            f.write(pre_commit_config)
        
        logger.info("Created .pre-commit-config.yaml")
    
    def create_vscode_config(self):
        """Create VS Code configuration."""
        vscode_dir = self.project_root / ".vscode"
        vscode_dir.mkdir(exist_ok=True)
        
        # settings.json
        settings = {
            "python.defaultInterpreterPath": "./venv/bin/python",
            "python.linting.enabled": True,
            "python.linting.pylintEnabled": False,
            "python.linting.flake8Enabled": True,
            "python.linting.flake8Args": ["--max-line-length=88"],
            "python.formatting.provider": "black",
            "python.formatting.blackArgs": ["--line-length=88"],
            "python.sortImports.args": ["--profile", "black"],
            "python.testing.pytestEnabled": True,
            "python.testing.pytestArgs": ["tests/"],
            "python.testing.unittestEnabled": False,
            "files.exclude": {
                "**/__pycache__": True,
                "**/*.pyc": True,
                "**/venv": True,
                "**/htmlcov": True,
                "**/.pytest_cache": True
            },
            "editor.formatOnSave": True,
            "editor.codeActionsOnSave": {
                "source.organizeImports": True
            }
        }
        
        with open(vscode_dir / "settings.json", 'w') as f:
            json.dump(settings, f, indent=2)
        
        # launch.json
        launch_config = {
            "version": "0.2.0",
            "configurations": [
                {
                    "name": "LERK API",
                    "type": "python",
                    "request": "launch",
                    "program": "${workspaceFolder}/services/api/main.py",
                    "console": "integratedTerminal",
                    "env": {
                        "PYTHONPATH": "${workspaceFolder}",
                        "DATABASE_URL": "postgresql://user:password@localhost:5432/lerk_db",
                        "REDIS_URL": "redis://localhost:6379/0",
                        "QDRANT_URL": "http://localhost:6333"
                    }
                },
                {
                    "name": "LERK Tests",
                    "type": "python",
                    "request": "launch",
                    "module": "pytest",
                    "args": ["tests/", "-v"],
                    "console": "integratedTerminal",
                    "env": {
                        "PYTHONPATH": "${workspaceFolder}"
                    }
                }
            ]
        }
        
        with open(vscode_dir / "launch.json", 'w') as f:
            json.dump(launch_config, f, indent=2)
        
        logger.info("Created VS Code configuration")
    
    def setup_environment(self):
        """Set up the complete environment."""
        try:
            logger.info("Starting environment setup")
            
            # Load configuration
            config = self.load_config()
            
            # Create directories
            self.create_directories()
            
            # Create .env file
            self.create_env_file(config)
            
            # Create configuration files
            self.create_config_files(config)
            
            # Create Docker Compose
            self.create_docker_compose(config)
            
            # Create pre-commit configuration
            self.create_pre_commit_config()
            
            # Create VS Code configuration
            self.create_vscode_config()
            
            logger.info("Environment setup completed successfully")
            return True
            
        except Exception as e:
            logger.error(f"Environment setup failed: {e}")
            return False


def main():
    """Main entry point for environment setup."""
    parser = argparse.ArgumentParser(description='LERK Environment Setup')
    parser.add_argument('--config', 
                       help='Path to configuration file')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Enable verbose logging')
    
    args = parser.parse_args()
    
    # Configure logging level
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Create environment setup
    setup = EnvironmentSetup(config_file=args.config)
    
    try:
        success = setup.setup_environment()
        
        if success:
            print("\n" + "="*50)
            print("ENVIRONMENT SETUP SUCCESSFUL")
            print("="*50)
            print("Created:")
            print("  - Project directories")
            print("  - .env file")
            print("  - Configuration files (dev.yaml, production.yaml)")
            print("  - Docker Compose configuration")
            print("  - Pre-commit hooks")
            print("  - VS Code configuration")
            print("="*50)
            print("\nNext steps:")
            print("1. Edit .env file with your configuration")
            print("2. Run: ./scripts/install_deps.sh")
            print("3. Run: ./scripts/dev_start.sh")
            print("4. Run: python scripts/init_db.py")
        else:
            print("Environment setup failed!")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"Environment setup failed: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
